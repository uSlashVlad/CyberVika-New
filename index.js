const Discord = require('discord.js'); // –ø–æ–ª—É—á–µ–Ω–∏–µ discord.js
const bot = new Discord.Client(); // —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
const prefix = "!"; // –ø—Ä–µ—Ñ–∏–∫ –±–æ—Ç–∞
const axios = require('axios');
require('dotenv').config();

const token = process.env.BOT_TOKEN;
bot.login(token); // –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω—É

const langRoles = [
    '–ø–∏—Ç–æ–Ω',
    '–ø–∞—Å–∫–∞–ª—å',
    'c++',
    'c#',
    'javascript',
    'dart',
    'java'
];

const emojis = {
    ok: '‚úÖ',
    warn: '‚ö†',
    error: 'üö´',
    block: '‚õî'
}

const helpEmbed = new Discord.RichEmbed({
    title: '**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø–æ–º–æ—â—å**',
    color: 0x7FFFD4,
    fields: [
        {
            name: '–ü–æ–º–æ—â—å',
            value: `**${prefix}–ø–æ–º–æ—â—å**\n**${prefix}–ø–æ–º–æ—â—å *<–∫–æ–º–∞–Ω–¥–∞>***`
        },
        {
            name: '–†–æ–ª—å',
            value: `**${prefix}—Ä–æ–ª—å *<–Ω–∞–∑–≤–∞–Ω–∏–µ>***`
        }
    ]
});

const roleHelpEmbed = new Discord.RichEmbed({
    title: '**!–ø–æ–º–æ—â—å —Ä–æ–ª—å**',
    color: 0x8B00FF,
    fields: [
        {
            name: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ',
            value: `**${prefix}—Ä–æ–ª—å *<–Ω–∞–∑–≤–∞–Ω–∏–µ>***`
        },
        {
            name: '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π',
            value: '**' + langRoles.join('\n') + '**'
        }
    ]
});


bot.on('ready', () => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    bot.user.setActivity('–≤–µ–±–∏–Ω–∞—Ä', { type: "WATCHING" }); // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
});


bot.on('message', message => {
    if (message.content.startsWith(prefix) && message.author != bot.user) {
        procMessage(message);
    }
});


async function procMessage(message) {
    let args = message.content.substring(prefix.length).split(' ').join('\n').split('\n');
    args = deleteEmpty(args);

    let command = args[0].toLowerCase();
    args.shift();

    switch (command) {
        case '–ø–æ–º–æ—â—å':
            if (args[0]) {
                switch (args[0]) {
                    case '—Ä–æ–ª—å':
                        send(message, roleHelpEmbed);
                        break;
                    default:
                        send(message, '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
                }
            } else {
                send(message, helpEmbed);
            }
            break;
        case '—Ä–æ–ª—å':
            let role = args[0];
            if (role) {
                role = role.toLowerCase();
                if (role.startsWith('—Å')) {
                    role = 'c' + role.slice(1);
                }
                let getRole = await message.guild.roles.find(x => x.name === upFirstLetter(role));
                if (getRole) {
                    let indexOfRole = langRoles.indexOf(getRole.name);
                    if (indexOfRole !== null && indexOfRole !== undefined) {
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if (message.member.roles.find(x => x.name === upFirstLetter(role))) {
                            // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
                            await message.member.removeRole(getRole);
                            await send(message, '**' + message.author.username + '** —É–±—Ä–∞–ª —Å —Å–µ–±—è —Ä–æ–ª—å **' + getRole.name + '**');
                            await message.react(emojis.ok);

                        } else {
                            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
                            await message.member.addRole(getRole);
                            await send(message, `–†–æ–ª—å **${getRole.name}** –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **${message.author.username}**`);
                            await message.react(emojis.ok);
                        }
                    }
                } else {
                    await send(message, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–π **!–ø–æ–º–æ—â—å —Ä–æ–ª—å**');
                    await message.react(emojis.warn);
                }
            } else {
                await send(message, '–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–π **!–ø–æ–º–æ—â—å —Ä–æ–ª—å**');
                await message.react(emojis.warn);
            }
            break;
    }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function send(message, content) {
    return new Promise(resolve => {
        message.channel.send(content);
        resolve();
    });
}

function deleteEmpty(arr) {
    return arr.filter(el => { return el != '' });
}

function upFirstLetter(string) {
    return string[0].toUpperCase() + string.slice(1);
}
